trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  backendResourceGroup: 'TerraformState'
  backendStorageAccount: 'lpwterraformstate'
  backendContainer: 'tfstate'
  backendKey: 'lpwazure/state.tfstate'

stages:
  - stage: tfvalidate
    jobs:
    - job: validate
      continueOnError: false
      steps:
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'LPWAZDO'
            backendAzureRmResourceGroupName: '$(backendResourceGroup)'
            backendAzureRmStorageAccountName: '$(backendStorageAccount)'
            backendAzureRmContainerName: '$(backendContainer)'
            backendAzureRmKey: '$(backendKey)'
        - task: TerraformTaskV4@4
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
  - stage: tfdeploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
        - task: DownloadSecureFile@1
          name: terraformvars
          inputs:
            secureFile: 'terraform.tfvars'
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'LPWAZDO'
            backendAzureRmResourceGroupName: '$(backendResourceGroup)'
            backendAzureRmStorageAccountName: '$(backendStorageAccount)'
            backendAzureRmContainerName: '$(backendContainer)'
            backendAzureRmKey: '$(backendKey)'
        - task: TerraformTaskV4@4
          displayName: plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            commandOptions: |
              -var-file=$(terraformvars.secureFilePath)
            environmentServiceNameAzureRM: 'LPWAZDO'
        - task: TerraformTaskV4@4
          displayName: apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            commandOptions: |
              -input=false -auto-approve -var-file=$(terraformvars.secureFilePath)
            environmentServiceNameAzureRM: 'LPWAZDO'